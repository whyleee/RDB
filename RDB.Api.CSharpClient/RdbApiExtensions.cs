// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RDB
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RdbApi.
    /// </summary>
    public static partial class RdbApiExtensions
    {
            /// <summary>
            /// Get OS name, version and environment name.
            /// </summary>
            /// <remarks>
            /// Just for Docker testing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> InfoGetAsync(this IRdbApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Value>> ValuesGetAsync(this IRdbApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValuesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='text'>
            /// New value text.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ValuesPostAsync(this IRdbApi operations, string text = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValuesPostWithHttpMessagesAsync(text, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get value by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// ID of value to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Value> ValuesByIdGetAsync(this IRdbApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValuesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update existing value text.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// ID of value to update.
            /// </param>
            /// <param name='text'>
            /// New value text.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ValuesByIdPutAsync(this IRdbApi operations, string id, string text = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValuesByIdPutWithHttpMessagesAsync(id, text, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete value by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// ID of value to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Value> ValuesByIdDeleteAsync(this IRdbApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValuesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
